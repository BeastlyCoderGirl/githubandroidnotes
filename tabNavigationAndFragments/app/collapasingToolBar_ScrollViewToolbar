 Step 1.
    To get the toolbar to move when content in the fragment is
    scrolled, we’ll add a coordinator layout to MainActivity. A
    coordinator layout is like a souped-up frame layout that’s used to
    coordinate animations and transitions between different views. In
    this case, we’ll use the coordinator layout to coordinate scrollable
    content in TopFragment and MainActivity’s toolbar.:

<androidx.coordinatorlayout.widget.CoordinatorLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    tools:context=".MainActivity">

Step 2.You'll need to Add this line  to enable the toolbar to scroll. If you wanted the TabLayout to
       scroll too, you’d add the code to that element as well.:

       app:layout_scrollFlags="scroll|enterAlways" And this is going to be in the toolbar:

       <androidx.appcompat.widget.Toolbar
                   android:id="@+id/toolbar"
                   android:layout_width="match_parent"
                   android:layout_height="?attr/actionBarSize"
                   app:layout_scrollFlags="scroll|enterAlways" />

Step 3. You'll need to  mark the view whose content you expect the user to scroll:

        app:layout_behavior="@string/appbar_scrolling_view_behavior" This is going to be inside the viewpager2:

        <androidx.viewpager2.widget.ViewPager2
                android:id="@+id/pager"
                android:layout_width="match_parent"
                android:layout_height="match_parent"
                app:layout_behavior="@string/appbar_scrolling_view_behavior"/>

Step 4.Go under the fragment_top And We want the whole fragment to be able to scroll.

<androidx.core.widget.NestedScrollView
    xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    tools:context=".TopFragment">

Step 5. We’re using a FrameLayout because we want to
           position the text on top of the image.

           <FrameLayout
                   android:layout_width="match_parent"
                   android:layout_height="wrap_content">

                   <ImageView
                       android:id="@+id/info_image"
                       android:layout_width="match_parent"
                       android:layout_height="300dp"
                       android:scaleType="centerCrop"
                       android:src="@drawable/restaurant"
                       android:contentDescription="@string/restaurant_image"/>

Step 6. We’re using a LinearLayout to contain the text. We’re giving it a
white background, and the margins  will add space around the edges.

<LinearLayout
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginTop="40dp"
            android:layout_marginLeft="16dp"
            android:layout_marginRight="16dp"
            android:padding="16dp"
            android:background="#FFFFFF"
            android:orientation="vertical">
            (This is inside the Framelayout)

Step 7. This is going to display Bits and Pizzas
                    <TextView
                        android:textSize="32sp"
                        android:layout_width="match_parent"
                        android:layout_height="wrap_content"
                        android:text="@string/company_name"/>

                    //This is going to display the big text
                    <TextView
                        android:layout_width="match_parent"
                        android:layout_height="wrap_content"
                        android:text="@string/home_text"/>

Step 8.We’ve added an ID to the layout
CoordinatorLayout, as we’ll need it later in the chapter.

<androidx.coordinatorlayout.widget.CoordinatorLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    android:id="@+id/coordinator"
    android:layout_width="match_parent"
    android:layout_height="match_parent">

Step 9.We need to Add a appbar
    <com.google.android.material.appbar.AppBarLayout
        android:layout_width="match_parent"
        android:layout_height="300dp"
        android:theme="@style/ThemeOverlay.AppCompat.Dark.ActionBar">

Step 10.This is the CollapsingToolbarLayout. It needs to be within an AppBarLayout.:

 <com.google.android.material.appbar.CollapsingToolbarLayout
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            app:layout_scrollFlags="scroll|exitUntilCollapsed">

Step 11. Initially i couldn't see toolbar or the backspace arrow
So i needed to create an id

<androidx.appcompat.widget.Toolbar
                android:id="@+id/toolbar"
                android:layout_width="match_parent"
                android:layout_height="?attr/actionBarSize"
                app:layout_collapseMode="pin" />

                //Make sure you close off the CollapsingToolbarLayout and The AppBarLayout
            </com.google.android.material.appbar.CollapsingToolbarLayout>
               </com.google.android.material.appbar.AppBarLayout>


Step 12. The NestedScrollView contains the content we want the user
to be able to scroll.

<androidx.core.widget.NestedScrollView
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        app:layout_behavior="@string/appbar_scrolling_view_behavior">

Step 13. We’re using a LinearLayout to position the scrollable content

 <LinearLayout
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:orientation="vertical"
            android:padding="16dp">

Step 14. We’re using EditTexts to add some
content we can scroll to the layout.

           <EditText
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:hint="@string/order_name_hint" />


            <EditText
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:hint="@string/order_details_hint"
               />

        //Make sure you close the LinearLayout, Nested ScrollView and The CoordinatorLayout
        </LinearLayout>
    </androidx.core.widget.NestedScrollView>
</androidx.coordinatorlayout.widget.CoordinatorLayout>